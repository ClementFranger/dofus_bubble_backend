service: dofus-bubble

package:
  individually: true

plugins:
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: eu-west-3

  environment:
    ACCOUNT: '166257563783'
    DYNAMODB_TABLE: ${self:service}
    AWS_UTILS: 14

  iamRoleStatements:
    - Effect: Allow
      Action:
       - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  get_all_items:
    handler: dofus_bubble/dynamodb/get_all_items.get_all_items
    events:
      - http:
          path: dofus_bubble/dynamodb
          method: get
          cors: true
    layers:
      - "arn:aws:lambda:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNT}:layer:aws-utils:${self:provider.environment.AWS_UTILS}"
  get_item:
    handler: dofus_bubble/dynamodb/get_item.get_item
    events:
      - http:
          path: dofus_bubble/dynamodb/{_id}
          method: get
          cors: true
    layers:
      - "arn:aws:lambda:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNT}:layer:aws-utils:${self:provider.environment.AWS_UTILS}"
  put_item:
    handler: dofus_bubble/dynamodb/put_item.put_item
    events:
      - http:
          path: dofus_bubble/dynamodb
          method: post
          cors: true
    layers:
      - "arn:aws:lambda:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNT}:layer:aws-utils:${self:provider.environment.AWS_UTILS}"
